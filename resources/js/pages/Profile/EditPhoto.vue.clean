<template>
  <div class="min-h-screen bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-3xl mx-auto">
      <div class="bg-white rounded-xl shadow-md overflow-hidden">
        <div class="p-6">
          <h1 class="text-2xl font-bold text-gray-900 mb-6">Edit Foto Profil</h1>
          
          <!-- Image Cropper -->
          <div class="flex flex-col items-center mb-8">
            <div class="relative w-64 h-64 mb-6 overflow-hidden rounded-full border-2 border-gray-200">
              <img 
                v-if="imagePreview" 
                :src="imagePreview" 
                ref="imageElement"
                class="w-full h-full object-cover"
                :style="{ transform: `scale(${scale})` }"
              />
              <div v-else class="w-full h-full bg-gray-100 flex items-center justify-center">
                <span class="text-gray-400">Pratinjau Gambar</span>
              </div>
            </div>
            
            <div class="flex flex-col items-center space-y-4 w-full max-w-md">
              <input 
                type="file" 
                id="photo-upload"
                ref="fileInput"
                accept="image/*" 
                @change="handleFileSelect"
                class="hidden"
              />
              <button 
                @click="$refs.fileInput.click()"
                class="w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                Pilih Gambar
              </button>
              
              <div v-if="imagePreview" class="w-full space-y-2">
                <label class="block text-sm font-medium text-gray-700 mb-1">Perbesar/Perkecil</label>
                <div class="flex items-center gap-4">
                  <button 
                    @click="adjustScale(-0.1)"
                    class="p-1 rounded-full bg-gray-200 hover:bg-gray-300"
                    :disabled="scale <= 0.5"
                  >
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4" />
                    </svg>
                  </button>
                  <input 
                    type="range" 
                    v-model="scale" 
                    min="0.5" 
                    max="2" 
                    step="0.1"
                    class="flex-1 h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
                  />
                  <button 
                    @click="adjustScale(0.1)"
                    class="p-1 rounded-full bg-gray-200 hover:bg-gray-300"
                    :disabled="scale >= 2"
                  >
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                    </svg>
                  </button>
                </div>
                <div class="flex justify-between text-xs text-gray-500">
                  <span>Kecil</span>
                  <span>Besar</span>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Action Buttons -->
          <div class="flex justify-between space-x-3 pt-4 border-t border-gray-200">
            <div>
              <a 
                :href="'/home'" 
                class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
              >
                <i class="fas fa-home mr-1"></i> Kembali ke Home
              </a>
            </div>
            <div class="flex space-x-3">
              <a 
                :href="'/profile'" 
                class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
              >
                Batal
              </a>
              <button 
                type="button"
                @click="savePhoto"
                :disabled="isSaving"
                class="px-4 py-2 bg-green-600 text-white rounded-md shadow-sm text-sm font-medium hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed"
                ref="submitButton"
              >
                {{ isSaving ? 'Mengunggah...' : 'Simpan Perubahan' }}
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
export default {
  data() {
    return {
      imagePreview: '',
      scale: 1,
      isSaving: false
    }
  },
  methods: {
    handleFileSelect(event) {
      const file = event.target.files[0];
      
      if (file) {
        if (!file.type.match('image.*')) {
          alert('File harus berupa gambar');
          return;
        }
        
        const reader = new FileReader();
        reader.onload = (e) => {
          this.imagePreview = e.target.result;
        };
        reader.readAsDataURL(file);
      }
    },
    
    adjustScale(delta) {
      const newScale = this.scale + delta;
      if (newScale >= 0.5 && newScale <= 2) {
        this.scale = newScale;
      }
    },
    
    getCsrfToken() {
      // Cari meta tag dengan name="csrf-token"
      const token = document.querySelector('meta[name="csrf-token"]');
      if (token) {
        return token.getAttribute('content');
      }
      
      // Coba mencari dari cookies
      const cookies = document.cookie.split(';');
      for (let i = 0; i < cookies.length; i++) {
        const cookie = cookies[i].trim();
        if (cookie.startsWith('XSRF-TOKEN=')) {
          return decodeURIComponent(cookie.substring('XSRF-TOKEN='.length));
        }
      }
      
      console.error('CSRF token tidak ditemukan');
      return '';
    },
    
    savePhoto() {
      // Cek apakah ada gambar yang dipilih
      if (!this.imagePreview) {
        alert('Silakan pilih foto terlebih dahulu');
        return;
      }
      
      // Set loading state
      this.isSaving = true;
      
      // Get CSRF token
      const csrfToken = this.getCsrfToken();
      
      // Create an image from the preview
      const img = new Image();
      img.src = this.imagePreview;
      
      // Store reference to component
      const self = this;
      
      img.onload = function() {
        try {
          // Create a canvas element
          const canvas = document.createElement('canvas');
          const ctx = canvas.getContext('2d');
          
          // Set dimensions
          const size = 400; // Fixed size for the uploaded image
          canvas.width = size;
          canvas.height = size;
          
          // Apply scale and center the image
          const scaledWidth = img.width * self.scale;
          const scaledHeight = img.height * self.scale;
          const x = (canvas.width - scaledWidth) / 2;
          const y = (canvas.height - scaledHeight) / 2;
          
          // Clear canvas
          ctx.fillStyle = 'white';
          ctx.fillRect(0, 0, canvas.width, canvas.height);
          
          // Draw image with scaling
          ctx.drawImage(img, x, y, scaledWidth, scaledHeight);
          
          // Convert to blob
          canvas.toBlob(async (blob) => {
            try {
              // Create FormData
              const formData = new FormData();
              formData.append('photo', blob, 'profile.jpg');
              
              // Logs for debugging
              console.log('Uploading photo...', blob);
              console.log('Form data keys:', [...formData.keys()]);
              
              // Use an absolute URL to avoid routing issues
              const absoluteUrl = '/profile/photo';
              
              console.log('Sending request to:', absoluteUrl);
              console.log('With CSRF token:', csrfToken ? 'Present' : 'Missing');
              
              // Send the request with axios
              const response = await fetch(absoluteUrl, {
                method: 'POST',
                headers: {
                  'X-CSRF-TOKEN': csrfToken
                },
                body: formData
              });
              
              const data = await response.json();
              console.log('Server response:', data);
              
              if (data && data.success) {
                // Successfully uploaded
                console.log('Foto berhasil diunggah:', data.photo_url);
                
                // Show success message
                alert('Foto profil berhasil diperbarui!');
                
                // Redirect back to profile page after a short delay
                setTimeout(() => {
                  window.location.href = '/profile';
                }, 1000);
              } else {
                throw new Error(data?.message || 'Gagal mengupload foto');
              }
            } catch (error) {
              console.error('Error uploading photo:', error);
              let errorMessage = 'Gagal mengunggah foto. Silakan coba lagi.';
              
              alert(errorMessage);
            } finally {
              // Reset loading state
              self.isSaving = false;
            }
          }, 'image/jpeg', 0.9);
        } catch (error) {
          console.error('Error processing image:', error);
          alert('Terjadi kesalahan saat memproses gambar: ' + error.message);
          self.isSaving = false;
        }
      };
      
      img.onerror = () => {
        console.error('Error loading image');
        alert('Gagal memuat gambar. Pastikan file yang diunggah valid.');
        self.isSaving = false;
      };
    }
  }
}
</script>

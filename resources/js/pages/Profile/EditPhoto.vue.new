<template>
  <div class="min-h-screen bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-3xl mx-auto">
      <div class="bg-white rounded-xl shadow-md overflow-hidden">
        <div class="p-6">
          <h1 class="text-2xl font-bold text-gray-900 mb-6">Edit Foto Profil</h1>
          
          <!-- Image Cropper -->
          <div class="flex flex-col items-center mb-8">
            <div class="relative w-64 h-64 mb-6 overflow-hidden rounded-full border-2 border-gray-200">
              <img 
                v-if="imagePreview" 
                :src="imagePreview" 
                ref="imageElement"
                class="w-full h-full object-cover"
                :style="{ transform: `scale(${scale})` }"
              />
              <div v-else class="w-full h-full bg-gray-100 flex items-center justify-center">
                <span class="text-gray-400">Pratinjau Gambar</span>
              </div>
            </div>
            
            <div class="flex flex-col items-center space-y-4 w-full max-w-md">
              <input 
                type="file" 
                id="photo-upload"
                ref="fileInput"
                accept="image/*" 
                @change="handleFileSelect"
                class="hidden"
              />
              <button 
                @click="$refs.fileInput.click()"
                class="w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                Pilih Gambar
              </button>
              
              <div v-if="imagePreview" class="w-full space-y-2">
                <label class="block text-sm font-medium text-gray-700 mb-1">Perbesar/Perkecil</label>
                <div class="flex items-center gap-4">
                  <button 
                    @click="adjustScale(-0.1)"
                    class="p-1 rounded-full bg-gray-200 hover:bg-gray-300"
                    :disabled="scale <= 0.5"
                  >
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4" />
                    </svg>
                  </button>
                  <input 
                    type="range" 
                    v-model="scale" 
                    min="0.5" 
                    max="2" 
                    step="0.1"
                    class="flex-1 h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
                  />
                  <button 
                    @click="adjustScale(0.1)"
                    class="p-1 rounded-full bg-gray-200 hover:bg-gray-300"
                    :disabled="scale >= 2"
                  >
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                    </svg>
                  </button>
                </div>
                <div class="flex justify-between text-xs text-gray-500">
                  <span>Kecil</span>
                  <span>Besar</span>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Action Buttons -->
          <div class="flex justify-between space-x-3 pt-4 border-t border-gray-200">
            <div>
              <Link 
                :href="route('home')" 
                class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
              >
                <i class="fas fa-home mr-1"></i> Kembali ke Home
              </Link>
            </div>
            <div class="flex space-x-3">
              <Link 
                :href="route('profile.index')" 
                class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
              >
                Batal
              </Link>
              <button 
                type="button"
                @click="savePhoto"
                :disabled="!imagePreview || isSaving"
                :class="{'opacity-50 cursor-not-allowed': !imagePreview || isSaving}"
                class="px-4 py-2 bg-blue-600 text-white rounded-md shadow-sm text-sm font-medium hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                ref="submitButton"
              >
                {{ isSaving ? 'Mengunggah...' : 'Simpan Perubahan' }}
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref } from 'vue';
import { Link, router, usePage } from '@inertiajs/vue3';
import axios from 'axios';

// Data
const imagePreview = ref('');
const fileInput = ref(null);
const imageElement = ref(null);
const scale = ref(1);
const submitButton = ref(null);
const isSaving = ref(false);

// Methods
const handleFileSelect = (event) => {
  const file = event.target.files[0];
  
  if (file) {
    if (!file.type.match('image.*')) {
      alert('File harus berupa gambar');
      return;
    }
    
    const reader = new FileReader();
    reader.onload = (e) => {
      imagePreview.value = e.target.result;
    };
    reader.readAsDataURL(file);
  }
};

const adjustScale = (delta) => {
  const newScale = scale.value + delta;
  if (newScale >= 0.5 && newScale <= 2) {
    scale.value = newScale;
  }
};

const getCsrfToken = () => {
  // Cari meta tag dengan name="csrf-token"
  const token = document.querySelector('meta[name="csrf-token"]');
  if (token) {
    return token.getAttribute('content');
  }
  
  // Coba mencari dari cookies
  const cookies = document.cookie.split(';');
  for (let i = 0; i < cookies.length; i++) {
    const cookie = cookies[i].trim();
    if (cookie.startsWith('XSRF-TOKEN=')) {
      return decodeURIComponent(cookie.substring('XSRF-TOKEN='.length));
    }
  }
  
  // Jika tidak ada, berikan pesan kesalahan
  console.error('CSRF token tidak ditemukan');
  return '';
};

const savePhoto = async () => {
  try {
    if (!imagePreview.value) {
      alert('Silakan pilih foto terlebih dahulu');
      return;
    }
    
    // Set loading state
    isSaving.value = true;
    
    // Get the CSRF token
    const csrfToken = getCsrfToken();
    
    // Create a canvas element
    const img = new Image();
    img.src = imagePreview.value;
    
    img.onload = function() {
      try {
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        
        // Set dimensions
        const size = 400; // Fixed size for the uploaded image
        canvas.width = size;
        canvas.height = size;
        
        // Apply scale and center the image
        const scaledWidth = img.width * scale.value;
        const scaledHeight = img.height * scale.value;
        const x = (canvas.width - scaledWidth) / 2;
        const y = (canvas.height - scaledHeight) / 2;
        
        // Clear canvas
        ctx.fillStyle = 'white';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        
        // Draw image with scaling
        ctx.drawImage(img, x, y, scaledWidth, scaledHeight);
        
        // Convert to blob
        canvas.toBlob(async (blob) => {
          try {
            // Create a simplified FormData with just the photo
            const formData = new FormData();
            formData.append('photo', blob, 'profile.jpg');
            
            // Logs for debugging
            console.log('Uploading photo...', blob);
            console.log('Form data keys:', [...formData.keys()]);
            
            // Use an absolute URL to avoid routing issues
            const absoluteUrl = '/profile/photo';
            
            console.log('Sending request to:', absoluteUrl);
            console.log('With CSRF token:', csrfToken ? 'Present' : 'Missing');
            
            // Send the request with axios
            const response = await axios.post(absoluteUrl, formData, {
              headers: {
                'Content-Type': 'multipart/form-data',
                'X-CSRF-TOKEN': csrfToken
              },
              withCredentials: true,
              timeout: 30000,
              onUploadProgress: (progressEvent) => {
                const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);
                console.log(`Upload Progress: ${percentCompleted}%`);
              }
            });
            
            console.log('Server response:', response.data);
            
            if (response.data && response.data.success) {
              // Successfully uploaded
              console.log('Foto berhasil diunggah:', response.data.photo_url);
              
              // Update user photo URL in the page props
              const user = usePage().props.auth.user;
              if (user) {
                user.profile_photo = response.data.photo_url;
              }
              
              // Show success message
              alert('Foto profil berhasil diperbarui!');
              
              // Redirect back to profile page after a short delay
              setTimeout(() => {
                window.location.href = route('profile.index');
              }, 1000);
            } else {
              throw new Error(response.data?.message || 'Gagal mengupload foto');
            }
          } catch (error) {
            console.error('Error uploading photo:', error);
            let errorMessage = 'Gagal mengunggah foto. Silakan coba lagi.';
            
            if (error.response) {
              console.error('Server response:', error.response.data);
              errorMessage = error.response.data.message || errorMessage;
            } else if (error.request) {
              console.error('No response received:', error.request);
            } else {
              console.error('Error:', error.message);
            }
            
            alert(errorMessage);
          } finally {
            // Reset loading state
            isSaving.value = false;
          }
        }, 'image/jpeg', 0.9);
      } catch (error) {
        console.error('Error processing image:', error);
        alert('Terjadi kesalahan saat memproses gambar: ' + error.message);
        isSaving.value = false;
      }
    };
    
    img.onerror = () => {
      console.error('Error loading image');
      alert('Gagal memuat gambar. Pastikan file yang diunggah valid.');
      isSaving.value = false;
    };
  } catch (error) {
    console.error('Error saving photo:', error);
    alert('Terjadi kesalahan saat menyimpan foto: ' + error.message);
    isSaving.value = false;
  }
};
</script>
